# Enabled checks for the rpmlint to be run
Checks = string(default='')
# Various output filters, list of regexp strings eg. "E: .* no-signature"
Filters = string(default='')
# Treshold where we should error out, by default single error is enough
BadnessThreshold = integer(min=-1, default=-1)
# When checking that various files that should be compressed are
# indeed compressed, look for this filename extension
CompressExtension = string(default='bz2')
# Permitted Distribution Tag value in preamble
Distribution = string(default='')
# Permitted value for the Vendor tag in preamble
Vendor = string(default='')
# Base directory where to extract uninstalled packages while checking
# Default is to use mktemp from python to provide one
ExtractDir = string(default='')
# Regexp string for words that must never exist in preamble tag values
ForbiddenWords = string(default='')
# Accepted non-XDG legacy icon filenames, string regexp format
IconFilename = string(default='.*\.png$')
# Regexp string to disallow in various URL tags
InvalidURL = string(default='')
# Whether to allow packaging kernel modules in non-kernel packages.
KernelModuleRPMsOK = boolean(default=True)
# Maximum allowed line length for Summary and Description tags
MaxLineLength = integer(min=0, default=79)
# Regexp string with names of packages to treat as "meta" ones.
MetaPackageRegexp = string(default='^(bundle|task)-')
# Whether to enable checks that require networking
NetworkEnabled = boolean(default=False)
# Timeout for network operations in seconds
NetworkTimeout = integer(min=0, default=10)
# String regexp validating value for the Packager tag.
Packager = string(default='')
# Assumed default version of Python if one cannot be determined from files
PythonDefaultVersion = string(default='')
# Trick in perl version handling
PerlVersionTrick = boolean(default=True)
# Regexp string with expected suffix in Release tags.
ReleaseExtension = string(default='')
# Regexp string with allowed Group tag for games
RpmGamesGroup = string(default='Games')
# Doc files to which end of line and UTF-8 checks should not be applied
SkipDocsRegexp = string(default='\.(?:rtf|x?html?|svg|ml[ily]?)$')
# Whether to use the Enchant spell checker for spell checking
UseEnchant = boolean(default=True)
# Whether debug sources are expected to be in separate packages from
# -debuginfo, typically -debugsource.
UseDebugSource = boolean(default=False)
# Whether an explicit Epoch should always be specified in preamble
UseEpoch = boolean(default=False)
# Whether to want default start/stop runlevels specified in init scripts
UseDefaultRunlevels = boolean(default=True)
# Whether symlinks between directories should be relative.
UseRelativeSymlinks = boolean(default=True)
# Whether %changelog entries should contain a version
UseVersionInChangelog = boolean(default=True)
# Whether init scripts must use /var/lock/subsys
UseVarLockSubsys = boolean(default=True)
# Regexp string with value for the BuildHost preamble tag
ValidBuildHost = string(default='')
# Standard "needs" values for non-XDG legacy menu items
ExtraMenuNeeds = string(default='')
# Regexp string with exceptions for hardcoded library paths.
HardcodedLibPathExceptions = string(default='/lib/(modules|cpp|perl5|rpm|hotplug|firmware|systemd)($|[\s/,])')
# Values for non-XDG legacy menu item sections
ValidMenuSections = string(default='')
# Disallowed Runtime dependencies
InvalidRequires = string(default='')
# List of directory prefixes that are not allowed in packages
DisallowedDirs = string(default='')
# Standard OS groups
StandardGroups = string(default='')
# Standard OS users
StandardUsers = string(default='')
# List of directories considered to be system default library search paths.
SystemLibPaths = string(default='')
# Regexp string with executables that must be compiled as position independent
PieExecutables = string(default=())
# Architecture dependent paths in which packages are allowed to install files
# even if they are all non-binary
UsrLibBinaryException = string(default='^/usr/lib(64)?/(perl|python|ruby|menu|pkgconfig|ocaml|lib[^/]+\.(so|l?a)$|bonobo/servers/|\.build-id)')
# Interpreters whose scriptlets are allowed to be empty
ValidEmptyShells = string(default='')
# Package scriptlet interpreters
ValidShells = string(default='')
# Man page warning category, passed to groff -w while checking man pages.
# See the groff(1) or troff(1) man pages for available categories.
ManWarningCategory = string(default='mac')
# Values for the Group tag, if not specified pulled from RPM
ValidGroups = string(default='')
# Permissions for files in source packages
ValidSrcPerms = tuple(default=list(0o644, 0o755))
# Command and arguments to validate appdata files
AppDataChecker = tuple(default=list('appstream-util', 'validate-relax'))
# Values for the License tag
ValidLicenses = string(default='')

# Additional warnings on specific function calls
[WarnOnFunction]
[[__many__]]
f_name = string(default='')
good_param = string(default='')
description = string(default='')

# Set badness tweaking for various options
[Scoring]
__many___ = int(default=0)

# Paths in which non-XDG legacy icons should be installed
[IconPath]
[[__many__]]
path = string
type = option('normal', 'mini', 'large', default='normal')

# Default known application launchers for desktop entries
[MenuLaunchers]
[[__many__]]
regexp = string
binaries = list(default=None)

# Exception list for dangling symlink checks.  The first in each pair
# is a regexp, and the second the package in which the target of the
# dangling symlink is shipped
[DanglingSymlinkExceptions]
[[__many__]]
path = string
name = string
